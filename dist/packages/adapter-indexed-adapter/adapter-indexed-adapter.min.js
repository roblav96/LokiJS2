(function webpackUniversalModuleDefinition(root,factory){if(typeof exports==="object"&&typeof module==="object")module.exports=factory();else if(typeof define==="function"&&define.amd)define("adapter-indexed-adapter",[],factory);else if(typeof exports==="object")exports["adapter-indexed-adapter"]=factory();else root["adapter-indexed-adapter"]=factory()})(this,function(){return function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.i=function(value){return value};__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name)){Object.defineProperty(exports,name,{configurable:false,enumerable:true,get:getter})}};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module["default"]}:function getModuleExports(){return module};__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};__webpack_require__.p="";return __webpack_require__(__webpack_require__.s=1)}([function(module,__webpack_exports__,__webpack_require__){"use strict";class IndexedAdapter{constructor(appname){this.app="loki";if(typeof appname!=="undefined"){this.app=appname}this.catalog=null;if(!this.checkAvailability()){throw new Error("indexedDB does not seem to be supported for your environment")}}checkAvailability(){if(typeof indexedDB!=="undefined"&&indexedDB)return true;return false}loadDatabase(dbname){const appName=this.app;const adapter=this;if(this.catalog===null||this.catalog.db===null){return new Promise(resolve=>{adapter.catalog=new LokiCatalog(cat=>{adapter.catalog=cat;resolve(adapter.loadDatabase(dbname))})})}return new Promise(resolve=>{this.catalog.getAppKey(appName,dbname,result=>{if(result.id===0){resolve();return}resolve(result.val)})})}loadKey(dbname){return this.loadDatabase(dbname)}saveDatabase(dbname,dbstring){const appName=this.app;const adapter=this;let resolve;let reject;const result=new Promise((res,rej)=>{resolve=res;reject=rej});function saveCallback(result){if(result&&result.success===true){resolve()}else{reject(new Error("Error saving database"))}}if(this.catalog===null||this.catalog.db===null){this.catalog=new LokiCatalog(cat=>{adapter.catalog=cat;cat.setAppKey(appName,dbname,dbstring,saveCallback)});return result}this.catalog.setAppKey(appName,dbname,dbstring,saveCallback);return result}saveKey(dbname,dbstring){return this.saveDatabase(dbname,dbstring)}deleteDatabase(dbname){const appName=this.app;const adapter=this;if(this.catalog===null||this.catalog.db===null){return new Promise(resolve=>{adapter.catalog=new LokiCatalog(cat=>{adapter.catalog=cat;resolve(adapter.deleteDatabase(dbname))})})}return new Promise(resolve=>{this.catalog.getAppKey(appName,dbname,result=>{const id=result.id;if(id!==0){adapter.catalog.deleteAppKey(id)}resolve()})})}deleteKey(dbname){return this.deleteDatabase(dbname)}deleteDatabasePartitions(dbname){this.getDatabaseList(result=>{result.forEach(str=>{if(str.startsWith(dbname)){this.deleteDatabase(str)}})})}getDatabaseList(callback){const appName=this.app;const adapter=this;if(this.catalog===null||this.catalog.db===null){this.catalog=new LokiCatalog(cat=>{adapter.catalog=cat;adapter.getDatabaseList(callback)});return}this.catalog.getAppKeys(appName,results=>{const names=[];for(let idx=0;idx<results.length;idx++){names.push(results[idx].key)}if(typeof callback==="function"){callback(names)}else{names.forEach(obj=>{console.log(obj)})}})}getKeyList(callback){return this.getDatabaseList(callback)}getCatalogSummary(callback){const appName=this.app;const adapter=this;if(this.catalog===null||this.catalog.db===null){this.catalog=new LokiCatalog(cat=>{adapter.catalog=cat;adapter.getCatalogSummary(callback)});return}this.catalog.getAllKeys(results=>{const entries=[];let obj;let size;let oapp;let okey;let oval;for(let idx=0;idx<results.length;idx++){obj=results[idx];oapp=obj.app||"";okey=obj.key||"";oval=obj.val||"";size=oapp.length*2+okey.length*2+oval.length+1;entries.push({app:obj.app,key:obj.key,size:size})}if(typeof callback==="function"){callback(entries)}else{entries.forEach(obj=>{console.log(obj)})}})}}__webpack_exports__["a"]=IndexedAdapter;class LokiCatalog{constructor(callback){this.db=null;this.initializeLokiCatalog(callback)}initializeLokiCatalog(callback){const openRequest=indexedDB.open("LokiCatalog",1);const cat=this;openRequest.onupgradeneeded=(e=>{const thisDB=e.target.result;if(thisDB.objectStoreNames.contains("LokiAKV")){thisDB.deleteObjectStore("LokiAKV")}if(!thisDB.objectStoreNames.contains("LokiAKV")){const objectStore=thisDB.createObjectStore("LokiAKV",{keyPath:"id",autoIncrement:true});objectStore.createIndex("app","app",{unique:false});objectStore.createIndex("key","key",{unique:false});objectStore.createIndex("appkey","appkey",{unique:true})}});openRequest.onsuccess=(e=>{cat.db=e.target.result;if(typeof callback==="function")callback(cat)});openRequest.onerror=(e=>{throw e})}getAppKey(app,key,callback){const transaction=this.db.transaction(["LokiAKV"],"readonly");const store=transaction.objectStore("LokiAKV");const index=store.index("appkey");const appkey=app+","+key;const request=index.get(appkey);request.onsuccess=(usercallback=>e=>{let lres=e.target.result;if(lres===null||typeof lres==="undefined"){lres={id:0,success:false}}if(typeof usercallback==="function"){usercallback(lres)}else{console.log(lres)}})(callback);request.onerror=(usercallback=>e=>{if(typeof usercallback==="function"){usercallback({id:0,success:false})}else{throw e}})(callback)}getAppKeyById(id,callback,data){const transaction=this.db.transaction(["LokiAKV"],"readonly");const store=transaction.objectStore("LokiAKV");const request=store.get(id);request.onsuccess=((data,usercallback)=>e=>{if(typeof usercallback==="function"){usercallback(e.target.result,data)}else{console.log(e.target.result)}})(data,callback)}setAppKey(app,key,val,callback){const transaction=this.db.transaction(["LokiAKV"],"readwrite");const store=transaction.objectStore("LokiAKV");const index=store.index("appkey");const appkey=app+","+key;const request=index.get(appkey);request.onsuccess=(e=>{let res=e.target.result;if(res===null||res===undefined){res={app:app,key:key,appkey:app+","+key,val:val}}else{res.val=val}const requestPut=store.put(res);requestPut.onerror=(usercallback=>e=>{if(typeof usercallback==="function"){usercallback({success:false})}else{console.error("LokiCatalog.setAppKey (set) onerror");console.error(request.error)}})(callback);requestPut.onsuccess=(usercallback=>e=>{if(typeof usercallback==="function"){usercallback({success:true})}})(callback)});request.onerror=(usercallback=>e=>{if(typeof usercallback==="function"){usercallback({success:false})}else{console.error("LokiCatalog.setAppKey (get) onerror");console.error(request.error)}})(callback)}deleteAppKey(id,callback){const transaction=this.db.transaction(["LokiAKV"],"readwrite");const store=transaction.objectStore("LokiAKV");const request=store.delete(id);request.onsuccess=(usercallback=>evt=>{if(typeof usercallback==="function")usercallback({success:true})})(callback);request.onerror=(usercallback=>evt=>{if(typeof usercallback==="function"){usercallback(false)}else{console.error("LokiCatalog.deleteAppKey raised onerror");console.error(request.error)}})(callback)}getAppKeys(app,callback){const transaction=this.db.transaction(["LokiAKV"],"readonly");const store=transaction.objectStore("LokiAKV");const index=store.index("app");const singleKeyRange=IDBKeyRange.only(app);const cursor=index.openCursor(singleKeyRange);const localdata=[];cursor.onsuccess=((data,callback)=>e=>{const cursor=e.target.result;if(cursor){const currObject=cursor.value;data.push(currObject);cursor.continue()}else{if(typeof callback==="function"){callback(data)}else{console.log(data)}}})(localdata,callback);cursor.onerror=(usercallback=>e=>{if(typeof usercallback==="function"){usercallback(null)}else{console.error("LokiCatalog.getAppKeys raised onerror");console.error(e)}})(callback)}getAllKeys(callback){const transaction=this.db.transaction(["LokiAKV"],"readonly");const store=transaction.objectStore("LokiAKV");const cursor=store.openCursor();const localdata=[];cursor.onsuccess=((data,callback)=>e=>{const cursor=e.target.result;if(cursor){const currObject=cursor.value;data.push(currObject);cursor.continue()}else{if(typeof callback==="function"){callback(data)}else{console.log(data)}}})(localdata,callback);cursor.onerror=(usercallback=>e=>{if(typeof usercallback==="function")usercallback(null)})(callback)}}},function(module,__webpack_exports__,__webpack_require__){"use strict";Object.defineProperty(__webpack_exports__,"__esModule",{value:true});var __WEBPACK_IMPORTED_MODULE_0__indexed_adapter__=__webpack_require__(0);__webpack_require__.d(__webpack_exports__,"IndexedAdapter",function(){return __WEBPACK_IMPORTED_MODULE_0__indexed_adapter__["a"]})}])});
